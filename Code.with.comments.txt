#Face Recognition using Python

import cv2
import deepface
import tkinter as tk

# Load the pre-trained face detection model
face_cascade = cv2.CascadeClassifier("PATH TO XML FILE")

# Initialize video capture from the webcam
cap = cv2.VideoCapture(0)

# Create the Tkinter window and widgets
window = tk.Tk()
window.title("Face Recognition with Details")
window.geometry("925x480")

# Define heading font and text
heading_font = ("Lora", 23, "bold")
heading_text = "HEADING"

# Create heading label and center it within expanded grid
heading = tk.Label(window, text=heading_text, font=heading_font)
heading.grid(row=0, column=1, columnspan=3)  # Place in center row, spanning 3 columns

# Define body font (slightly larger than default)
body_font = ("Montserrat", 16)  # Adjust size as desired

# Define text list for rows and columns
text_list = [
    ["1","2","3"],
    ["4",5","6"],
    ["7","8","9"],
    ["10","11","12"]
]

# Create empty labels for expanded grid to center the content
for i in range(2):
    tk.Label(window, text="").grid(row=i+1, column=0)  # Left empty columns
    tk.Label(window, text="").grid(row=i+1, column=4)

# Loop through text list, creating labels and placing them
for row_index, row in enumerate(text_list):
    for col_index, text in enumerate(row):
        cell_label = tk.Label(window, text=text, font=body_font, anchor="w")  # Include font here

        cell_label.grid(row=row_index+1, column=col_index+1)  # Placing the label


def show_details_window():
    window.deiconify()  # Show the Tkinter window
    window.mainloop()  # Start its event loop
# Main loop
while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        face_region = frame[y:y+h, x:x+w]

        try:
            results = deepface.analyze(face_region, actions=['age', 'gender', 'emotion'])

            cv2.putText(frame, f"Age: {results['age']}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
            cv2.putText(frame, f"Gender: {results['gender']}", (x, y+15), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
            cv2.putText(frame, f"Emotion: {results['dominant_emotion']}", (x, y+40), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

            # Update Tkinter labels with recognized details
            update_details(results['age'], results['gender'], results['dominant_emotion'])

        except Exception as e:
            print(f"Error during face recognition: {e}")

    cv2.imshow('Face Recognition', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
window.mainloop()  # Keep Tkinter window running until closed
